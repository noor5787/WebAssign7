Question1.<!DOCTYPE html>
<html>
<head>
  <title>Quiz Application</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Quiz Application</h1>
    <div id="quiz-container">
      <!-- Questions and options will be dynamically generated here -->
    </div>
    <button id="submit-btn">Submit Answer</button>
    <div id="popup" class="popup">
      <div class="popup-content">
        <h2 id="popup-message"></h2>
        <button id="next-btn">Next Question</button>
      </div>
    </div>
    <div id="leaderboard" class="leaderboard">
      <h2>Leaderboard</h2>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Correct Answers</th>
            <th>Incorrect Answers</th>
          </tr>
        </thead>
        <tbody>
          <!-- Leaderboard rows will be dynamically generated here -->
        </tbody>
      </table>
      <h2 id="overall-result"></h2>
    </div>
  </div>
  <script src="script.js"></script>
</body>
</html>
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

h1, h2 {
  text-align: center;
}

#quiz-container {
  margin-bottom: 20px;
}

#submit-btn, #next-btn {
  display: block;
  margin: 0 auto;
  padding: 10px 20px;
  background-color: #4caf50;
  color: #fff;
  border: none;
  cursor: pointer;
}

.popup {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 999;
}

.popup-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: #fff;
  padding: 20px;
  border-radius: 5px;
  text-align: center;
}

.leaderboard {
  display: none;
  margin-top: 40px;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

th, td {
  padding: 8px;
  text-align: center;
  border-bottom: 1px solid #ddd;
}

th {
  background-color: #4caf50;
  color: #fff;
}
Question2.<!DOCTYPE html>
<html>
<head>
  <title>Digital Clock</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Digital Clock</h1>
    <div id="clock" class="clock">
      <span id="hours">00</span>
      <span>:</span>
      <span id="minutes">00</span>
      <span>:</span>
      <span id="seconds">00</span>
    </div>
  </div>
  <script src="script.js"></script>
</body>
</html>
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

h1 {
  margin-bottom: 20px;
}

.clock {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2em;
}

span {
  padding: 0 5px;
}

span:not(:last-child) {
  border-right: 1px solid #000;
}

Question3.<!DOCTYPE html>
<html>
<head>
  <title>GitHub User Finder</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>GitHub User Finder</h1>
    <form id="search-form" class="search-form">
      <input type="text" id="username-input" placeholder="Enter GitHub username">
      <button type="submit">Search</button>
    </form>
    <div id="user-profile" class="user-profile">
      <!-- User profile information will be dynamically generated here -->
    </div>
  </div>
  <script src="script.js"></script>
</body>
</html>
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

h1 {
  margin-bottom: 20px;
}

.search-form {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

input[type="text"] {
  padding: 10px;
  font-size: 1em;
  width: 200px;
  border: 1px solid #ddd;
}

button[type="submit"] {
  padding: 10px 20px;
  font-size: 1em;
  background-color: #4caf50;
  color: #fff;
  border: none;
  cursor: pointer;
}

.user-profile {
  display: none;
}

.user-profile img {
  width: 100px;
  border-radius: 50%;
  margin-bottom: 10px;
}

.user-profile h2 {
  margin-bottom: 10px;
}
const searchForm = document.getElementById('search-form');
const usernameInput = document.getElementById('username-input');
const userProfile = document.getElementById('user-profile');

searchForm.addEventListener('submit', (e) => {
  e.preventDefault();
  const username = usernameInput.value;
  if (username) {
    getUserProfile(username);
  }
});

async function getUserProfile(username) {
  const response = await fetch(`https://api.github.com/users/${username}`);
  const userData = await response.json();
  if (response.ok) {
    displayUserProfile(userData);
  } else {
    displayError('User not found');
  }
}

function displayUserProfile(userData) {
  userProfile.innerHTML = `
    <img src="${userData.avatar_url}" alt="User Avatar">
    <h2>${userData.name}</h2>
  `;
  userProfile.style.display = 'block';
}

function displayError(message) {
  userProfile.innerHTML = `<p>${message}</p>`;
  userProfile.style.display = 'block';
}
Question4.HTML Code
<!DOCTYPE html>
<html>
<head>
  <title>Product Listing</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Product Listing</h1>
    <div id="product-list" class="product-list">
      <!-- Products will be dynamically generated here -->
    </div>
  </div>
  <script src="script.js"></script>
</body>
</html>
CSS Code
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

h1 {
  margin-bottom: 20px;
}

.product-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

.product-card {
  width: 200px;
  margin: 10px;
  padding: 10px;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.product-card img {
  width: 100%;
  max-height: 200px;
  object-fit: cover;
  margin-bottom: 10px;
}

.product-card h3 {
  margin-bottom: 5px;
}

.product-card p {
  color: #888;
  margin-bottom: 10px;
}
JavaScriptcode
const productList = document.getElementById('product-list');

async function fetchProducts() {
  try {
    const response = await fetch('https://fakestoreapi.com/products');
    const products = await response.json();
    displayProducts(products);
  } catch (error) {
    console.error('Error fetching products:', error);
  }
}

function displayProducts(products) {
  productList.innerHTML = '';
  products.forEach((product) => {
    const productCard = createProductCard(product);
    productList.appendChild(productCard);
  });
}

function createProductCard(product) {
  const productCard = document.createElement('div');
  productCard.classList.add('product-card');

  const image = document.createElement('img');
  image.src = product.image;
  image.alt = product.title;
  productCard.appendChild(image);

  const title = document.createElement('h3');
  title.textContent = product.title;
  productCard.appendChild(title);

  const price = document.createElement('p');
  price.textContent = `$${product.price}`;
  productCard.appendChild(price);

  return productCard;
}

fetchProducts();
Question5.<!DOCTYPE html>
<html>
<head>
  <title>Product Listing</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Product Listing</h1>
    <div id="product-list" class="product-list">
      <!-- Products will be dynamically generated here -->
    </div>
  </div>

  <!-- Cart Modal -->
  <div id="cart-modal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Shopping Cart</h2>
      <div id="cart-items" class="cart-items">
        <!-- Cart items will be dynamically generated here -->
      </div>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>
CSS code
/* Existing CSS code */

.modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 600px;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
JavascriptCode
// Existing JavaScript code

const cartModal = document.getElementById('cart-modal');
const cartItems = document.getElementById('cart-items');
const closeCartModal = document.querySelector('.close');

// Cart items array
let cart = [];

// Event listener for 'Add to Cart' button
productList.addEventListener('click', (event) => {
  if (event.target.classList.contains('add-to-cart')) {
    const productId = event.target.dataset.id;
    const selectedProduct = products.find((product) => product.id === parseInt(productId));
    addToCart(selectedProduct);
  }
});

// Event listener for 'View Cart' button
document.addEventListener('click', (event) => {
  if (event.target.id === 'view-cart-btn') {
    openCartModal();
  }
});

// Event listener for 'Close' button on cart modal
closeCartModal.addEventListener('click', () => {
  closeCartModalFunction();
});

// Add product to cart
function addToCart(product) {
  const cartItem = cart.find((item) => item.id === product.id);

  if (cartItem) {
    cartItem.quantity++;
  } else {
    cart.push({ ...product, quantity: 1 });
  }

  displayCartItems();
}

// Display cart items in the UI
function displayCartItems() {
  cartItems.innerHTML = '';

  cart.forEach((item) => {
    const cartItemCard = createCartItemCard(item);
    cartItems.appendChild(cartItemCard);
  });
}

// Create cart item card
function createCartItemCard(item) {
  const cartItemCard = document.createElement('div');
  cartItemCard.classList.add('product-card');

  const image = document.createElement('img');
  image.src = item.image;
  image.alt = item.title;
  cartItemCard.appendChild(image);

  const title = document.createElement('h3');
  title.textContent = item.title;
  cartItemCard.appendChild(title);

  const price = document.createElement('p');
  price.textContent = `$${item.price}`;
  cartItemCard.appendChild(price);

  const quantity = document.createElement('p');
  quantity.textContent = `Quantity: ${item.quantity}`;
  cartItemCard.appendChild(quantity);

  return cartItemCard;
}

// Open cart modal
function openCartModal() {
  cartModal.style.display = 'block';
}

// Close cart modal
function closeCartModalFunction() {
  cartModal.style.display = 'none';
}

fetchProducts();
Question6 HTml code
<!DOCTYPE html>
<html>
<head>
  <title>Product Listing</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Product Listing</h1>
    <div id="product-list" class="product-list">
      <!-- Products will be dynamically generated here -->
    </div>
  </div>

  <!-- Cart Modal -->
  <div id="cart-modal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Shopping Cart</h2>
      <div id="cart-items" class="cart-items">
        <!-- Cart items will be dynamically generated here -->
      </div>
    </div>
  </div>

  <!-- Single Product Page Modal -->
  <div id="single-product-modal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <div id="single-product" class="single-product">
        <!-- Single product details will be dynamically generated here -->
      </div>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>
CSS
/* Existing CSS code */

.single-product {
  text-align: center;
}

.single-product img {
  width: 200px;
  margin-bottom: 10px;
}

.single-product h3 {
  margin-bottom: 5px;
}

.single-product p {
  color: #888;
  margin-bottom: 10px;
}
Javascript
// Existing JavaScript code

const singleProductModal = document.getElementById('single-product-modal');
const singleProduct = document.getElementById('single-product');
const closeSingleProductModal = document.querySelectorAll('.close')[1];

productList.addEventListener('click', (event) => {
  if (event.target.classList.contains('product-card')) {
    const productId = event.target.dataset.id;
    const selectedProduct = products.find((product) => product.id === parseInt(productId));
    displaySingleProduct(selectedProduct);
  }
});

closeSingleProductModal.addEventListener('click', () => {
  closeSingleProductModalFunction();
});

function displaySingleProduct(product) {
  singleProduct.innerHTML = `
    <img src="${product.image}" alt="Product Image">
    <h3>${product.title}</h3>
    <p>Price: $${product.price}</p>
    <p>Description: ${product.description}</p>
  `;
  singleProductModal.style.display = 'block';
}

function closeSingleProductModalFunction() {
  singleProductModal.style.display = 'none';
}

fetchProducts();
Question7.<!DOCTYPE html>
<html>
<head>
  <title>Live Preview</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Live Preview</h1>
    <div class="form-section">
      <h2>Form Section</h2>
      <form id="preview-form" class="preview-form">
        <div class="form-group">
          <label for="name">Name:</label>
          <input type="text" id="name" placeholder="Enter your name">
        </div>
        <div class="form-group">
          <label for="email">Email:</label>
          <input type="email" id="email" placeholder="Enter your email">
        </div>
        <div class="form-group">
          <label for="message">Message:</label>
          <textarea id="message" placeholder="Enter your message"></textarea>
        </div>
      </form>
    </div>
    <div class="live-preview-section">
      <h2>Live Preview</h2>
      <div id="live-preview" class="live-preview">
        <p><strong>Name:</strong> <span id="preview-name"></span></p>
        <p><strong>Email:</strong> <span id="preview-email"></span></p>
        <p><strong>Message:</strong> <span id="preview-message"></span></p>
      </div>
    </div>
  </div>
  <script src="script.js"></script>
</body>
</html>
CSS code
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

h1, h2 {
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 20px;
  text-align: left;
}

label {
  display: block;
  margin-bottom: 5px;
}

input[type="text"],
input[type="email"],
textarea {
  width: 100%;
  padding: 10px;
  font-size: 1em;
  border: 1px solid #ddd;
}

.live-preview {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: left;
}

.live-preview p {
  margin-bottom: 10px;
}

.live-preview p span {
  font-weight: bold;
}
Javascript
const nameInput = document.getElementById('name');
const emailInput = document.getElementById('email');
const messageInput = document.getElementById('message');
const previewName = document.getElementById('preview-name');
const previewEmail = document.getElementById('preview-email');
const previewMessage = document.getElementById('preview-message');

nameInput.addEventListener('input', updatePreview);
emailInput.addEventListener('input', updatePreview);
messageInput.addEventListener('input', updatePreview);

function updatePreview() {
  const name = nameInput.value;
  const email = emailInput.value;
  const message = messageInput.value;

  previewName.textContent = name;
  previewEmail.textContent = email;
  previewMessage.textContent = message;
}
Question8.<!DOCTYPE html>
<html>
<head>
  <title>Todo App</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Todo App</h1>
    <div class="todo-form">
      <input type="text" id="task-input" placeholder="Enter a task">
      <button id="add-task-btn">Add Task</button>
    </div>
    <ul id="task-list" class="task-list">
      <!-- Tasks will be dynamically generated here -->
    </ul>
  </div>
  <script src="script.js"></script>
</body>
</html>
CSS
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  text-align: center;
}

h1 {
  margin-bottom: 20px;
}

.todo-form {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

input[type="text"] {
  padding: 10px;
  font-size: 1em;
  width: 200px;
  border: 1px solid #ddd;
}

button {
  padding: 10px 20px;
  font-size: 1em;
  background-color: #4caf50;
  color: #fff;
  border: none;
  cursor: pointer;
}

.task-list {
  text-align: left;
  list-style-type: none;
  padding: 0;
}

.task-list li {
  margin-bottom: 10px;
}

.task-list li span {
  margin-right: 10px;
}

Javascript code
const taskInput = document.getElementById('task-input');
const addTaskBtn = document.getElementById('add-task-btn');
const taskList = document.getElementById('task-list');

addTaskBtn.addEventListener('click', addTask);

function addTask() {
  const task = taskInput.value.trim();
  if (task !== '') {
    const taskItem = document.createElement('li');
    taskItem.innerHTML = `
      <span>&#10004;</span>
      ${task}
      <span class="delete-task">&#10008;</span>
    `;
    taskList.appendChild(taskItem);
    taskInput.value = '';
    taskInput.focus();
  }
}

taskList.addEventListener('click', (event) => {
  if (event.target.classList.contains('delete-task')) {
    const taskItem = event.target.parentElement;
    taskList.removeChild(taskItem);
  }
});
Question9.<!DOCTYPE html>
<html>
<head>
  <title>Todo App</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Todo App</h1>
    <div class="todo-form">
      <input type="text" id="task-input" placeholder="Enter a task">
      <button id="add-task-btn">Add Task</button>
    </div>
    <ul id="task-list" class="task-list">
      <!-- Tasks will be dynamically generated here -->
    </ul>
  </div>
  <script src="script.js"></script>
</body>
</html>
CSS code
/* Existing CSS code */

.task-list li.completed {
  background-color: #d9d9d9;
}

.task-list li.deleted {
  display: none;
}

.task-list li span.update-status {
  margin-right: 10px;
  cursor: pointer;
}

.task-list li span.delete-task {
  margin-left: 10px;
  cursor: pointer;
}
javascript
// Existing JavaScript code

taskList.addEventListener('click', (event) => {
  if (event.target.classList.contains('delete-task')) {
    const taskItem = event.target.parentElement;
    taskItem.classList.add('deleted');
  }

  if (event.target.classList.contains('update-status')) {
    const taskItem = event.target.parentElement;
    taskItem.classList.toggle('completed');
  }
});


Question10.<!DOCTYPE html>
<html>
<head>
  <title>Todo App</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Todo App</h1>
    <div class="todo-form">
      <input type="text" id="task-input" placeholder="Enter a task">
      <button id="add-task-btn">Add Task</button>
    </div>
    <ul id="task-list" class="task-list">
      <!-- Tasks will be dynamically generated here -->
    </ul>
  </div>

  <!-- Edit Task Modal -->
  <div id="edit-task-modal" class="modal">
    <div class="modal-content">
      <h2>Edit Task</h2>
      <label for="edit-task-input">Task:</label>
      <input type="text" id="edit-task-input">
      <button id="update-task-btn">Update</button>
      <span class="close">&times;</span>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>
CSS Code
/* Existing CSS code */

.modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 400px;
}

.modal h2 {
  margin-bottom: 10px;
}

.modal label {
  display: block;
  margin-bottom: 5px;
}

.modal input[type="text"] {
  width: 100%;
  padding: 10px;
  font-size: 1em;
  border: 1px solid #ddd;
}

.modal button {
  padding: 10px 20px;
  font-size: 1em;
  background-color: #4caf50;
  color: #fff;
  border: none;
  cursor: pointer;
}

.modal .close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.modal .close:hover,
.modal .close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

JavaScript
// Existing JavaScript code

const editTaskModal = document.getElementById('edit-task-modal');
const editTaskInput = document.getElementById('edit-task-input');
const updateTaskBtn = document.getElementById('update-task-btn');
const closeEditModal = document.querySelector('.modal .close');

let selectedTask = null;

taskList.addEventListener('click', (event) => {
  if (event.target.classList.contains('edit-task')) {
    const taskItem = event.target.parentElement;
    selectedTask = taskItem;
    const taskText = taskItem.querySelector('.task-text').textContent;
    editTaskInput.value = taskText;
    editTaskModal.style.display = 'block';
  }
});

updateTaskBtn.addEventListener('click', updateTask);

closeEditModal.addEventListener('click', () => {
  closeEditModalFunction();
});

function updateTask() {
  const updatedTaskText = editTaskInput.value.trim();
  if (selectedTask && updatedTaskText !== '') {
    selectedTask.querySelector('.task-text').textContent = updatedTaskText;
    closeEditModalFunction();
  }
}

function closeEditModalFunction() {
  selectedTask = null;
  editTaskInput.value = '';
  editTaskModal.style.display = 'none';
}
